//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("IERealtyModel", "FK_tblAgent_tblAddress", "tblAddress", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(IERealtyDatabase.tblAddress), "tblAgent", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IERealtyDatabase.tblAgent), true)]
[assembly: EdmRelationshipAttribute("IERealtyModel", "FK_tblBroker_tblAddress", "tblAddress", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(IERealtyDatabase.tblAddress), "tblBroker", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IERealtyDatabase.tblBroker), true)]
[assembly: EdmRelationshipAttribute("IERealtyModel", "FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(IERealtyDatabase.tblAgentAvaialbleForAppointment), "tblAgentAvaialbleForAppointment1", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(IERealtyDatabase.tblAgentAvaialbleForAppointment), true)]
[assembly: EdmRelationshipAttribute("IERealtyModel", "FK_tblCustomerAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(IERealtyDatabase.tblAgentAvaialbleForAppointment), "tblCustomerAppointment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IERealtyDatabase.tblCustomerAppointment), true)]
[assembly: EdmRelationshipAttribute("IERealtyModel", "tblBrokerAgent", "tblAgent", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IERealtyDatabase.tblAgent), "tblBroker", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(IERealtyDatabase.tblBroker))]

#endregion

namespace IERealtyDatabase
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class IERealtyEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new IERealtyEntities object using the connection string found in the 'IERealtyEntities' section of the application configuration file.
        /// </summary>
        public IERealtyEntities() : base("name=IERealtyEntities", "IERealtyEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new IERealtyEntities object.
        /// </summary>
        public IERealtyEntities(string connectionString) : base(connectionString, "IERealtyEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new IERealtyEntities object.
        /// </summary>
        public IERealtyEntities(EntityConnection connection) : base(connection, "IERealtyEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<tblAddress> tblAddresses
        {
            get
            {
                if ((_tblAddresses == null))
                {
                    _tblAddresses = base.CreateObjectSet<tblAddress>("tblAddresses");
                }
                return _tblAddresses;
            }
        }
        private ObjectSet<tblAddress> _tblAddresses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<tblAgent> tblAgents
        {
            get
            {
                if ((_tblAgents == null))
                {
                    _tblAgents = base.CreateObjectSet<tblAgent>("tblAgents");
                }
                return _tblAgents;
            }
        }
        private ObjectSet<tblAgent> _tblAgents;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<tblAgentAvaialbleForAppointment> tblAgentAvaialbleForAppointments
        {
            get
            {
                if ((_tblAgentAvaialbleForAppointments == null))
                {
                    _tblAgentAvaialbleForAppointments = base.CreateObjectSet<tblAgentAvaialbleForAppointment>("tblAgentAvaialbleForAppointments");
                }
                return _tblAgentAvaialbleForAppointments;
            }
        }
        private ObjectSet<tblAgentAvaialbleForAppointment> _tblAgentAvaialbleForAppointments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<tblBroker> tblBrokers
        {
            get
            {
                if ((_tblBrokers == null))
                {
                    _tblBrokers = base.CreateObjectSet<tblBroker>("tblBrokers");
                }
                return _tblBrokers;
            }
        }
        private ObjectSet<tblBroker> _tblBrokers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<tblCustomerAppointment> tblCustomerAppointments
        {
            get
            {
                if ((_tblCustomerAppointments == null))
                {
                    _tblCustomerAppointments = base.CreateObjectSet<tblCustomerAppointment>("tblCustomerAppointments");
                }
                return _tblCustomerAppointments;
            }
        }
        private ObjectSet<tblCustomerAppointment> _tblCustomerAppointments;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the tblAddresses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTotblAddresses(tblAddress tblAddress)
        {
            base.AddObject("tblAddresses", tblAddress);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the tblAgents EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTotblAgents(tblAgent tblAgent)
        {
            base.AddObject("tblAgents", tblAgent);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the tblAgentAvaialbleForAppointments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTotblAgentAvaialbleForAppointments(tblAgentAvaialbleForAppointment tblAgentAvaialbleForAppointment)
        {
            base.AddObject("tblAgentAvaialbleForAppointments", tblAgentAvaialbleForAppointment);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the tblBrokers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTotblBrokers(tblBroker tblBroker)
        {
            base.AddObject("tblBrokers", tblBroker);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the tblCustomerAppointments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTotblCustomerAppointments(tblCustomerAppointment tblCustomerAppointment)
        {
            base.AddObject("tblCustomerAppointments", tblCustomerAppointment);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IERealtyModel", Name="tblAddress")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class tblAddress : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new tblAddress object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="address">Initial value of the Address property.</param>
        /// <param name="city">Initial value of the City property.</param>
        /// <param name="province">Initial value of the Province property.</param>
        /// <param name="country">Initial value of the Country property.</param>
        /// <param name="postalCode">Initial value of the PostalCode property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static tblAddress CreatetblAddress(global::System.Int64 id, global::System.String address, global::System.String city, global::System.String province, global::System.String country, global::System.String postalCode, global::System.Boolean isActive)
        {
            tblAddress tblAddress = new tblAddress();
            tblAddress.Id = id;
            tblAddress.Address = address;
            tblAddress.City = city;
            tblAddress.Province = province;
            tblAddress.Country = country;
            tblAddress.PostalCode = postalCode;
            tblAddress.IsActive = isActive;
            return tblAddress;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, false, "Address");
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, false, "City");
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Province
        {
            get
            {
                return _Province;
            }
            set
            {
                OnProvinceChanging(value);
                ReportPropertyChanging("Province");
                _Province = StructuralObject.SetValidValue(value, false, "Province");
                ReportPropertyChanged("Province");
                OnProvinceChanged();
            }
        }
        private global::System.String _Province;
        partial void OnProvinceChanging(global::System.String value);
        partial void OnProvinceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Country
        {
            get
            {
                return _Country;
            }
            set
            {
                OnCountryChanging(value);
                ReportPropertyChanging("Country");
                _Country = StructuralObject.SetValidValue(value, false, "Country");
                ReportPropertyChanged("Country");
                OnCountryChanged();
            }
        }
        private global::System.String _Country;
        partial void OnCountryChanging(global::System.String value);
        partial void OnCountryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PostalCode
        {
            get
            {
                return _PostalCode;
            }
            set
            {
                OnPostalCodeChanging(value);
                ReportPropertyChanging("PostalCode");
                _PostalCode = StructuralObject.SetValidValue(value, false, "PostalCode");
                ReportPropertyChanged("PostalCode");
                OnPostalCodeChanged();
            }
        }
        private global::System.String _PostalCode;
        partial void OnPostalCodeChanging(global::System.String value);
        partial void OnPostalCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "FK_tblAgent_tblAddress", "tblAgent")]
        public EntityCollection<tblAgent> tblAgents
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<tblAgent>("IERealtyModel.FK_tblAgent_tblAddress", "tblAgent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<tblAgent>("IERealtyModel.FK_tblAgent_tblAddress", "tblAgent", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "FK_tblBroker_tblAddress", "tblBroker")]
        public EntityCollection<tblBroker> tblBrokers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<tblBroker>("IERealtyModel.FK_tblBroker_tblAddress", "tblBroker");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<tblBroker>("IERealtyModel.FK_tblBroker_tblAddress", "tblBroker", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IERealtyModel", Name="tblAgent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class tblAgent : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new tblAgent object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="addressId">Initial value of the AddressId property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static tblAgent CreatetblAgent(global::System.Int64 id, global::System.String name, global::System.Int64 addressId, global::System.Boolean isActive)
        {
            tblAgent tblAgent = new tblAgent();
            tblAgent.Id = id;
            tblAgent.Name = name;
            tblAgent.AddressId = addressId;
            tblAgent.IsActive = isActive;
            return tblAgent;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AddressId
        {
            get
            {
                return _AddressId;
            }
            set
            {
                OnAddressIdChanging(value);
                ReportPropertyChanging("AddressId");
                _AddressId = StructuralObject.SetValidValue(value, "AddressId");
                ReportPropertyChanged("AddressId");
                OnAddressIdChanged();
            }
        }
        private global::System.Int64 _AddressId;
        partial void OnAddressIdChanging(global::System.Int64 value);
        partial void OnAddressIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "FK_tblAgent_tblAddress", "tblAddress")]
        public tblAddress tblAddress
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAddress>("IERealtyModel.FK_tblAgent_tblAddress", "tblAddress").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAddress>("IERealtyModel.FK_tblAgent_tblAddress", "tblAddress").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<tblAddress> tblAddressReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAddress>("IERealtyModel.FK_tblAgent_tblAddress", "tblAddress");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<tblAddress>("IERealtyModel.FK_tblAgent_tblAddress", "tblAddress", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "tblBrokerAgent", "tblBroker")]
        public EntityCollection<tblBroker> tblBrokers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<tblBroker>("IERealtyModel.tblBrokerAgent", "tblBroker");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<tblBroker>("IERealtyModel.tblBrokerAgent", "tblBroker", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IERealtyModel", Name="tblAgentAvaialbleForAppointment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class tblAgentAvaialbleForAppointment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new tblAgentAvaialbleForAppointment object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="agentId">Initial value of the AgentId property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static tblAgentAvaialbleForAppointment CreatetblAgentAvaialbleForAppointment(global::System.Int64 id, global::System.Int64 agentId, global::System.Boolean isActive)
        {
            tblAgentAvaialbleForAppointment tblAgentAvaialbleForAppointment = new tblAgentAvaialbleForAppointment();
            tblAgentAvaialbleForAppointment.Id = id;
            tblAgentAvaialbleForAppointment.AgentId = agentId;
            tblAgentAvaialbleForAppointment.IsActive = isActive;
            return tblAgentAvaialbleForAppointment;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AgentId
        {
            get
            {
                return _AgentId;
            }
            set
            {
                OnAgentIdChanging(value);
                ReportPropertyChanging("AgentId");
                _AgentId = StructuralObject.SetValidValue(value, "AgentId");
                ReportPropertyChanged("AgentId");
                OnAgentIdChanged();
            }
        }
        private global::System.Int64 _AgentId;
        partial void OnAgentIdChanging(global::System.Int64 value);
        partial void OnAgentIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment1")]
        public tblAgentAvaialbleForAppointment tblAgentAvaialbleForAppointment1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment1").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment1").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<tblAgentAvaialbleForAppointment> tblAgentAvaialbleForAppointment1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment")]
        public tblAgentAvaialbleForAppointment tblAgentAvaialbleForAppointment2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<tblAgentAvaialbleForAppointment> tblAgentAvaialbleForAppointment2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblAgentAvaialbleForAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "FK_tblCustomerAppointment_tblAgentAvaialbleForAppointment", "tblCustomerAppointment")]
        public EntityCollection<tblCustomerAppointment> tblCustomerAppointments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<tblCustomerAppointment>("IERealtyModel.FK_tblCustomerAppointment_tblAgentAvaialbleForAppointment", "tblCustomerAppointment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<tblCustomerAppointment>("IERealtyModel.FK_tblCustomerAppointment_tblAgentAvaialbleForAppointment", "tblCustomerAppointment", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IERealtyModel", Name="tblBroker")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class tblBroker : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new tblBroker object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="addressId">Initial value of the AddressId property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static tblBroker CreatetblBroker(global::System.Int64 id, global::System.String name, global::System.Int64 addressId, global::System.Boolean isActive)
        {
            tblBroker tblBroker = new tblBroker();
            tblBroker.Id = id;
            tblBroker.Name = name;
            tblBroker.AddressId = addressId;
            tblBroker.IsActive = isActive;
            return tblBroker;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AddressId
        {
            get
            {
                return _AddressId;
            }
            set
            {
                OnAddressIdChanging(value);
                ReportPropertyChanging("AddressId");
                _AddressId = StructuralObject.SetValidValue(value, "AddressId");
                ReportPropertyChanged("AddressId");
                OnAddressIdChanged();
            }
        }
        private global::System.Int64 _AddressId;
        partial void OnAddressIdChanging(global::System.Int64 value);
        partial void OnAddressIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "FK_tblBroker_tblAddress", "tblAddress")]
        public tblAddress tblAddress
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAddress>("IERealtyModel.FK_tblBroker_tblAddress", "tblAddress").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAddress>("IERealtyModel.FK_tblBroker_tblAddress", "tblAddress").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<tblAddress> tblAddressReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAddress>("IERealtyModel.FK_tblBroker_tblAddress", "tblAddress");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<tblAddress>("IERealtyModel.FK_tblBroker_tblAddress", "tblAddress", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "tblBrokerAgent", "tblAgent")]
        public EntityCollection<tblAgent> tblAgents
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<tblAgent>("IERealtyModel.tblBrokerAgent", "tblAgent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<tblAgent>("IERealtyModel.tblBrokerAgent", "tblAgent", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="IERealtyModel", Name="tblCustomerAppointment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class tblCustomerAppointment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new tblCustomerAppointment object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="mobile">Initial value of the Mobile property.</param>
        /// <param name="email">Initial value of the Email property.</param>
        /// <param name="appointmentDate">Initial value of the AppointmentDate property.</param>
        /// <param name="appointmentTime">Initial value of the AppointmentTime property.</param>
        /// <param name="durationInMinutes">Initial value of the DurationInMinutes property.</param>
        /// <param name="availableAgentId">Initial value of the AvailableAgentId property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static tblCustomerAppointment CreatetblCustomerAppointment(global::System.Int64 id, global::System.String mobile, global::System.String email, global::System.DateTime appointmentDate, global::System.TimeSpan appointmentTime, global::System.Int64 durationInMinutes, global::System.Int64 availableAgentId, global::System.Boolean isActive)
        {
            tblCustomerAppointment tblCustomerAppointment = new tblCustomerAppointment();
            tblCustomerAppointment.Id = id;
            tblCustomerAppointment.Mobile = mobile;
            tblCustomerAppointment.Email = email;
            tblCustomerAppointment.AppointmentDate = appointmentDate;
            tblCustomerAppointment.AppointmentTime = appointmentTime;
            tblCustomerAppointment.DurationInMinutes = durationInMinutes;
            tblCustomerAppointment.AvailableAgentId = availableAgentId;
            tblCustomerAppointment.IsActive = isActive;
            return tblCustomerAppointment;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Mobile
        {
            get
            {
                return _Mobile;
            }
            set
            {
                if (_Mobile != value)
                {
                    OnMobileChanging(value);
                    ReportPropertyChanging("Mobile");
                    _Mobile = StructuralObject.SetValidValue(value, false, "Mobile");
                    ReportPropertyChanged("Mobile");
                    OnMobileChanged();
                }
            }
        }
        private global::System.String _Mobile;
        partial void OnMobileChanging(global::System.String value);
        partial void OnMobileChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                if (_Email != value)
                {
                    OnEmailChanging(value);
                    ReportPropertyChanging("Email");
                    _Email = StructuralObject.SetValidValue(value, false, "Email");
                    ReportPropertyChanged("Email");
                    OnEmailChanged();
                }
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime AppointmentDate
        {
            get
            {
                return _AppointmentDate;
            }
            set
            {
                if (_AppointmentDate != value)
                {
                    OnAppointmentDateChanging(value);
                    ReportPropertyChanging("AppointmentDate");
                    _AppointmentDate = StructuralObject.SetValidValue(value, "AppointmentDate");
                    ReportPropertyChanged("AppointmentDate");
                    OnAppointmentDateChanged();
                }
            }
        }
        private global::System.DateTime _AppointmentDate;
        partial void OnAppointmentDateChanging(global::System.DateTime value);
        partial void OnAppointmentDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan AppointmentTime
        {
            get
            {
                return _AppointmentTime;
            }
            set
            {
                if (_AppointmentTime != value)
                {
                    OnAppointmentTimeChanging(value);
                    ReportPropertyChanging("AppointmentTime");
                    _AppointmentTime = StructuralObject.SetValidValue(value, "AppointmentTime");
                    ReportPropertyChanged("AppointmentTime");
                    OnAppointmentTimeChanged();
                }
            }
        }
        private global::System.TimeSpan _AppointmentTime;
        partial void OnAppointmentTimeChanging(global::System.TimeSpan value);
        partial void OnAppointmentTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DurationInMinutes
        {
            get
            {
                return _DurationInMinutes;
            }
            set
            {
                if (_DurationInMinutes != value)
                {
                    OnDurationInMinutesChanging(value);
                    ReportPropertyChanging("DurationInMinutes");
                    _DurationInMinutes = StructuralObject.SetValidValue(value, "DurationInMinutes");
                    ReportPropertyChanged("DurationInMinutes");
                    OnDurationInMinutesChanged();
                }
            }
        }
        private global::System.Int64 _DurationInMinutes;
        partial void OnDurationInMinutesChanging(global::System.Int64 value);
        partial void OnDurationInMinutesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Message
        {
            get
            {
                return _Message;
            }
            set
            {
                OnMessageChanging(value);
                ReportPropertyChanging("Message");
                _Message = StructuralObject.SetValidValue(value, true, "Message");
                ReportPropertyChanged("Message");
                OnMessageChanged();
            }
        }
        private global::System.String _Message;
        partial void OnMessageChanging(global::System.String value);
        partial void OnMessageChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AvailableAgentId
        {
            get
            {
                return _AvailableAgentId;
            }
            set
            {
                if (_AvailableAgentId != value)
                {
                    OnAvailableAgentIdChanging(value);
                    ReportPropertyChanging("AvailableAgentId");
                    _AvailableAgentId = StructuralObject.SetValidValue(value, "AvailableAgentId");
                    ReportPropertyChanged("AvailableAgentId");
                    OnAvailableAgentIdChanged();
                }
            }
        }
        private global::System.Int64 _AvailableAgentId;
        partial void OnAvailableAgentIdChanging(global::System.Int64 value);
        partial void OnAvailableAgentIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                if (_IsActive != value)
                {
                    OnIsActiveChanging(value);
                    ReportPropertyChanging("IsActive");
                    _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                    ReportPropertyChanged("IsActive");
                    OnIsActiveChanged();
                }
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("IERealtyModel", "FK_tblCustomerAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment")]
        public tblAgentAvaialbleForAppointment tblAgentAvaialbleForAppointment
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblCustomerAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblCustomerAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<tblAgentAvaialbleForAppointment> tblAgentAvaialbleForAppointmentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblCustomerAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<tblAgentAvaialbleForAppointment>("IERealtyModel.FK_tblCustomerAppointment_tblAgentAvaialbleForAppointment", "tblAgentAvaialbleForAppointment", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
